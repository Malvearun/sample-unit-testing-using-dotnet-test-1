name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

resources:
  repositories:
    - repository: sample-unit-testing-using-dotnet-test-1
      type: git
      name: tech/sample-unit-testing-using-dotnet-test-1
      reference: azure-pipelines

trigger:
  branches:
    include:
      - azure-pipelines
  paths:
    include:
      - sample-unit-testing-using-dotnet-test-1/azure-pipelines/variables.yaml

pool:
  vmImage: 'Azure Pipelines'

pr:
  branches:
    include:
      - azure-pipelines

stages:

# Stage 1: Get Infra Artifacts
# - stage: GetInfraArtifacts
#   jobs:
#     - job: GetInfraArtifacts
#       pool: 
#         vmImage: 'Azure Pipelines'
#       steps:
#         - checkout: self

# Stage 2: Approve Release and Build
- stage: ApproveRelease_Build
  dependsOn: GetInfraArtifacts
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
    - deployment: ReviewRelease_App
      pool: server
      environment: Approval-Updates
      strategy:
        runOnce:
          deploy:
            steps:
            - script: echo "Deploying Application after approval"

# Stage 3: Build
- stage: Build
  dependsOn: ApproveRelease_Build
  displayName: 'Build Stage'
  jobs:
    - job: Build
      displayName: 'Build Job'
      pool:
        vmImage: 'Azure Pipelines'
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - script: |
            echo "Restoring packages..."
            dotnet restore ./PrimeService/PrimeService.csproj
            dotnet restore ./PrimeService.Tests/PrimeService.Tests.csproj
        displayName: 'Restore packages'

      - script: |
            echo "Building the solution..."
            dotnet build PrimeService/PrimeService.csproj --configuration Release
            dotnet build ./PrimeService.Tests/PrimeService.Tests.csproj --configuration Release
        displayName: 'Build Project'

# Stage 4: SonarQube Analysis
- stage: SonarQubeAnalysis
  dependsOn: Build
  displayName: 'SonarQube Analysis Stage'
  jobs:
    - job: SonarQubeAnalysis
      displayName: 'SonarQube Analysis Job'
      pool:
        vmImage: 'Azure Pipelines'
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: SonarQubePrepare@5
        inputs:
          SonarQube: 'SonarQube Connection' # This should match the name of your service connection
          scannerMode: 'MSBuild'
          projectKey: '$(SONAR_PROJECT_KEY)'
          projectName: 'Your Project Name'
          projectVersion: '1.0'
          extraProperties: |
            sonar.branch.name=$(Build.SourceBranchName)
        displayName: 'Prepare SonarQube Analysis'

      - script: dotnet build PrimeService/PrimeService.csproj --configuration Release
        displayName: 'Build Project for SonarQube Analysis'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'

      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'
        displayName: 'Publish SonarQube Quality Gate Result'

# Stage 5: Test
- stage: Test
  displayName: 'Test Stage'
  dependsOn: SonarQubeAnalysis
  jobs:
    - job: Test
      displayName: 'Test Job'
      pool:
        vmImage: 'Azure Pipelines'
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: dotnet test PrimeService.Tests/PrimeService.Tests.csproj --configuration Release --results-directory $(Pipeline.Workspace)/test-results --logger "trx;LogFileName=test_unit_results.trx"
        displayName: 'Run Tests'
        continueOnError: false

# Stage 6: Publish Test Results
- stage: PublishTestResults
  displayName: 'Publish Test Results'
  dependsOn: Test
  jobs:
    - job: PublishTestResults
      displayName: 'Publish Test Results Job'
      pool:
        vmImage: 'Azure Pipelines'
      steps:
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '**/*.trx'
          testRunTitle: 'PrimeService Unit Tests'
          searchFolder: $(Pipeline.Workspace)/test-results

# Stage 7: Build and Push Docker Image
# - stage: BuildAndPush
#   displayName: 'Build and Push Docker Image'
#   dependsOn: PublishTestResults
#   jobs:
#     - job: BuildAndPushDocker
#       displayName: 'Build and Push Docker Image Job'
#       pool:
#         vmImage: 'Azure Pipelines'
#       steps:
#       - task: Docker@2
#         inputs:
#           containerRegistry: '$(dockerRegistryServiceConnection)'
#           repository: '$(imageName)'
#           command: 'buildAndPush'
#           Dockerfile: 'PrimeService/Dockerfile'
#           tags: |
#             $(Build.BuildId)
#             $(Build.SourceBranchName)-$(Build.BuildId)
#             $(Build.SourceBranchName)-$(Build.BuildId)-$(Build.SourceVersion)
#       - script: |
#           echo "Docker Image pushed with tags: $(Build.BuildId), $(Build.SourceBranchName)-$(Build.BuildId), $(Build.SourceBranchName)-$(Build.BuildId)-$(Build.SourceVersion)"
#         displayName: 'Log Image Tags'

# Stage 8: Deploy
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: BuildAndPush
  jobs:
    - job: Deploy
      displayName: 'Deployment Job'
      pool:
        vmImage: 'Azure Pipelines'
      steps:
      - script: echo 'TODO – Deployment'
        displayName: 'TODO – Deployment'

# Stage 9: Publish Pipeline Logs
# - stage: PublishArtifacts
#   displayName: 'Publish Pipeline Logs'
#   dependsOn: Deploy
#   jobs:
#     - job: PublishPipelineLogs
#       displayName: 'Publish Pipeline Logs Job'
#       pool:
#         vmImage: 'Azure Pipelines'
#       steps:
#       - script: |
#           mkdir -p $(Pipeline.Workspace)/logs
#           cp -r $(Agent.TempDirectory)/* $(Pipeline.Workspace)/logs/
#         displayName: 'Copy Logs'

#       - task: ArchiveFiles@2
#         inputs:
#           rootFolderOrFile: $(Pipeline.Workspace)/logs
#           includeRootFolder: false
#           archiveFile: $(Pipeline.Workspace)/pipeline_logs.zip
#           replaceExistingArchive: true
#         displayName: 'Archive Pipeline Logs'

#       - task: PublishPipelineArtifact@1
#         inputs:
#           targetPath: $(Pipeline.Workspace)/pipeline_logs.zip
#           artifact: pipeline-logs
#         displayName: 'Publish Pipeline Logs as Artifact'

# - stage: ApproveRelease_CleanUp
#   dependsOn: PublishArtifacts
#   condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
#   jobs:
#     - deployment: ReviewRelease_CleanUp
#       pool: server
#       environment: Approval-Updates
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - script: echo ""

# - stage: CleanUp
#   dependsOn: ApproveRelease_CleanUp
#   jobs: 
#     - job: CleanUp
#       pool: 
#         name: 'Azure Pipelines'
#       continueOnError: true
#       steps:
#         - download: none
#         - task: DeleteFiles@1
#           inputs:
#             SourceFolder: '$(System.DefaultWorkingDirectory)'
#             Contents: '**/*'
#         - task: DeleteFiles@1