name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - azure-pipelines
  paths:
    include:
      - sample-unit-testing-using-dotnet-test-1/azure-pipelines/variables.yaml

pool:
  vmImage: 'Default'

pr:
  branches:
    include:
      - azure-pipelines

stages:

- stage: ApproveRelease_Build
  # dependsOn: GetInfraArtifacts
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
    - deployment: ReviewRelease_App
      pool: Default
      environment: Approval-Updates
      strategy:
        runOnce:
          deploy:
            steps:
            - script: echo "Deploying Application after approval"

# Stage 3: Build
- stage: Build
  dependsOn: ApproveRelease_Build
  displayName: 'Build Stage'
  jobs:
    - job: Build
      displayName: 'Build Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - script: |
            echo "Restoring packages..."
            dotnet restore ./PrimeService/PrimeService.csproj
            dotnet restore ./PrimeService.Tests/PrimeService.Tests.csproj
        displayName: 'Restore packages'

      - script: |
            echo "Building the solution..."
            dotnet build PrimeService/PrimeService.csproj --configuration Release
            dotnet build ./PrimeService.Tests/PrimeService.Tests.csproj --configuration Release
        displayName: 'Build Project'

# Stage 4: SonarQube Analysis
- stage: SonarQubeAnalysis
  dependsOn: Build
  displayName: 'SonarQube Analysis Stage'
  jobs:
    - job: SonarQubeAnalysis
      displayName: 'SonarQube Analysis Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: SonarQubePrepare@5
        inputs:
          SonarQube: 'SonarQube Connection' # This should match the name of your service connection
          scannerMode: 'MSBuild'
          projectKey: '$(SONAR_PROJECT_KEY)'
          projectName: '$(SONAR_PROJECT_NAME)'
          projectVersion: '1.0'
          extraProperties: |
            sonar.branch.name=$(Build.SourceBranchName)
        displayName: 'Prepare SonarQube Analysis'

      - script: dotnet build PrimeService/PrimeService.csproj --configuration Release
        displayName: 'Build Project for SonarQube Analysis'

      - task: SonarQubeAnalyze@5
        displayName: 'Run SonarQube Analysis'

      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'
        displayName: 'Publish SonarQube Quality Gate Result'

# Stage 5: Test
- stage: Test
  displayName: 'Test Stage'
  dependsOn: SonarQubeAnalysis
  jobs:
    - job: Test
      displayName: 'Test Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - script: dotnet test PrimeService.Tests/PrimeService.Tests.csproj --configuration Release --results-directory $(Pipeline.Workspace)/test-results --logger "trx;LogFileName=test_unit_results.trx"
        displayName: 'Run Tests'
        continueOnError: false

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Test
  jobs:
    - job: Deploy
      displayName: 'Deployment Job'
      pool:
        name: Default
      steps:
      - script: echo 'TODO – Deployment'
        displayName: 'TODO – Deployment'
