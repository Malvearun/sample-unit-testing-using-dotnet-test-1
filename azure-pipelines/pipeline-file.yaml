name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - azure-pipelines

pool:
  vmImage: 'Default'  

stages:

- stage: ApproveRelease_Build
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
    - deployment: ReviewRelease_App
      pool: Default
      environment: Approval-Updates
      continueOnError: false
      strategy:
        runOnce:
          deploy:
            steps:
            - script: echo "Deploying Application after approval"

- stage: Build
  dependsOn: ApproveRelease_Build
  displayName: 'Build Stage'
  jobs:
    - job: Build
      displayName: 'Build Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
        continueOnError: false
      - script: |
            echo "Restoring packages..."
            dotnet restore ./PrimeService/PrimeService.csproj
            dotnet restore ./PrimeService.Tests/PrimeService.Tests.csproj
        displayName: 'Restore packages'

      - script: |
            echo "Building the solution..."
            dotnet build PrimeService/PrimeService.csproj --configuration Release
            dotnet build ./PrimeService.Tests/PrimeService.Tests.csproj --configuration Release
        displayName: 'Build Project'
        continueOnError: false

- stage: SonarQubeAnalysis
  dependsOn: Build
  displayName: 'SonarQube Analysis Stage'
  jobs:
    - job: SonarQubeAnalysis
      displayName: 'SonarQube Analysis Job'
      pool:
        name: Default
      steps:
      - task: CmdLine@2
        displayName: 'Install Sonar Tools and Start Scanner'
        inputs:
          script: |
            echo Installing sonarScanner tool
            dotnet tool install --global dotnet-sonarscanner 

            echo Start Scanner
            dotnet-sonarscanner begin /k:"$(SONAR_PROJECT_KEY)" /d:sonar.host.url="$(SONAR_LINK)" /d:sonar.login="$(SONAR_TOKEN)"

      - script: dotnet build PrimeService/PrimeService.csproj --configuration Release
        displayName: 'Build Project for SonarQube Analysis'
        continueOnError: false

      - task: CmdLine@2
        displayName: 'Collect Sonar results and Upload'
        inputs:
          script: |
            echo Run Sonar End
            dotnet-sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"

- stage: Test
  displayName: 'Test Stage'
  dependsOn: SonarQubeAnalysis
  jobs:
    - job: Test
      displayName: 'Test Job'
      pool:
        name: Default
      steps:
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '8.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet
        continueOnError: false

      - script: dotnet test PrimeService.Tests/PrimeService.Tests.csproj --configuration Release --results-directory $(Pipeline.Workspace)/test-results --logger "trx;LogFileName=test_unit_results.trx"
        displayName: 'Run Tests'
        continueOnError: false

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Test
  jobs:
    - job: Deploy
      displayName: 'Deployment Job'
      pool:
        name: Default
      continueOnError: false
      steps:
      - script: echo 'TODO – Deployment'
        displayName: 'TODO – Deployment'
        continueOnError: false

- stage: PublishArtifacts
  displayName: 'Publish Complete Pipeline Logs'
  dependsOn: Deploy
  jobs:
    - job: PublishCompletePipelineLogs
      displayName: 'Publish Complete Pipeline Logs Job'
      pool:
        name: Default # Self-hosted agent pool
      timeoutInMinutes: 10 # Set job timeout to 10 minutes
      steps:
      - script: |
          echo "Copying pipeline logs to a temporary directory..."
          mkdir -p $(Pipeline.Workspace)/complete-logs
          cp -r $(System.DefaultWorkingDirectory)/* $(Pipeline.Workspace)/complete-logs/
        displayName: 'Copy Pipeline Logs to Temp Directory'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Pipeline.Workspace)/complete-logs
          includeRootFolder: false
          archiveFile: $(Pipeline.Workspace)/complete_pipeline_logs.zip
          replaceExistingArchive: true
        displayName: 'Archive Complete Pipeline Logs'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(Pipeline.Workspace)/complete_pipeline_logs.zip
          artifact: complete-pipeline-logs
        displayName: 'Publish Complete Pipeline Logs as Artifact'
